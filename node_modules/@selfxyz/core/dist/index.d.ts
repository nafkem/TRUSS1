// import express from "express";
// import cors from "cors";
// import type { Request, Response } from "express";
// import { SelfBackendVerifier, DefaultConfigStore } from "@selfxyz/core";
// import type { VerificationConfig } from "@selfxyz/core";

// const app = express();
// app.use(cors());
// app.use(express.json());

// // Initialize DefaultConfigStore with an ID
// const configStore = new DefaultConfigStore("truss-config-store");

// // Set default configuration (must provide the ID)
// await configStore.setConfig("truss-config-store", {
//   minimumAge: 18,
//   ofac: false,
// });

// // Define allowed attestations
// const allowedAttestations = new Map<1 | 2, boolean>([
//   [1, true],
//   [2, true],
// ]);

// // Initialize verifier
// const verifier = new SelfBackendVerifier(
//   "truss-seller-scope",
//   "https://hub.staging.selfcrypto.net",
//   false, // staging
//   allowedAttestations,
//   configStore,
//   "hex"
// );

// app.post("/verify", async (req: Request, res: Response) => {
//   try {
//     const { account, proof, sessionId } = req.body;

//     if (!account || !proof || !sessionId) {
//       return res.status(400).json({ error: "Missing required fields" });
//     }

//     // Get config using the ID
//     const config: VerificationConfig = await configStore.getConfig("truss-config-store");

//     // Pass config as JSON string to verifier
//     const result = await verifier.verify(
//       account.toLowerCase(),
//       proof,
//       sessionId,
//       JSON.stringify(config)
//     );

//     if (result.isValidDetails.isValid) {
//       return res.json({ verified: true, user: result.userData });
//     } else {
//       return res.json({ verified: false });
//     }
//   } catch (err) {
//     console.error("Verification error:", err);
//     res.status(500).json({ error: "Verification error" });
//   }
// });

// app.listen(4000, () => {
//   console.log("âœ… Self verifier running on http://localhost:4000");
// });
