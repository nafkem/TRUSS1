import { hashAlgos } from '../../constants/constants.js';
import { CertificateData } from '../certificate_parsing/dataStructure.js';
import { shaPad } from '../shaPad.js';
import { PassportData, SignatureAlgorithm } from '../types.js';
export declare function initPassportDataParsing(passportData: PassportData, skiPem?: any): PassportData;
export declare function generateCommitment(secret: string, attestation_id: string, passportData: PassportData): string;
export declare function generateNullifier(passportData: PassportData): string;
export declare function pad(hashFunction: (typeof hashAlgos)[number]): typeof shaPad;
export declare function padWithZeroes(bytes: number[], length: number): number[];
export declare function getPassportSignatureInfos(passportData: PassportData): {
    pubKey: any;
    signature: any;
    signatureAlgorithmFullName: string;
};
export declare function getCertificatePubKey(certificateData: CertificateData, signatureAlgorithm: string, hashFunction: string): any;
export declare function formatCertificatePubKeyDSC(certificateData: CertificateData, signatureAlgorithm: string): string[];
export declare function extractSignatureFromDSC(dscCertificate: string): number[];
export declare function formatSignatureDSCCircuit(cscaSignatureAlgorithm: string, cscaHashFunction: string, cscaCertificateData: CertificateData, signature: number[]): string[];
export declare function findStartPubKeyIndex(certificateData: CertificateData, rawCert: any, signatureAlgorithm: string): [number, number];
export declare function getSignatureAlgorithmFullName(certificateData: CertificateData, signatureAlgorithm: string, hashAlgorithm: string): string;
export declare function extractRSFromSignature(signatureBytes: number[]): {
    r: string;
    s: string;
};
export declare function getNAndK(sigAlg: SignatureAlgorithm): {
    n: number;
    k: number;
};
export declare function getNAndKCSCA(sigAlg: 'rsa' | 'ecdsa' | 'rsapss'): {
    n: number;
    k: number;
};
