import { parseCertificateSimple } from '../../certificate_parsing/parseCertificateSimple.js';
import { getCSCAFromSKI } from '../../csca.js';
import { brutforceSignatureAlgorithmDsc } from './brutForceDscSignature.js';
import { getCurveOrExponent } from './parsePassportData.js';
export function parseDscCertificateData(dscCert, skiPem = null) {
    let csca, cscaParsed, cscaHashAlgorithm, cscaSignatureAlgorithm, cscaCurveOrExponent, cscaSignatureAlgorithmBits, cscaSaltLength;
    let cscaFound = false;
    if (dscCert.authorityKeyIdentifier) {
        try {
            csca = getCSCAFromSKI(dscCert.authorityKeyIdentifier, skiPem);
            if (csca) {
                cscaParsed = parseCertificateSimple(csca);
                const details = brutforceSignatureAlgorithmDsc(dscCert, cscaParsed);
                cscaFound = true;
                cscaHashAlgorithm = details.hashAlgorithm;
                cscaSignatureAlgorithm = details.signatureAlgorithm;
                cscaCurveOrExponent = getCurveOrExponent(cscaParsed);
                cscaSignatureAlgorithmBits = parseInt(cscaParsed.publicKeyDetails.bits);
                cscaSaltLength = details.saltLength;
            }
        }
        catch (error) { }
    }
    else {
        console.log('js: dscCert.authorityKeyIdentifier not found');
    }
    return {
        cscaFound: cscaFound,
        cscaHashAlgorithm: cscaHashAlgorithm,
        cscaSignatureAlgorithm: cscaSignatureAlgorithm,
        cscaCurveOrExponent: cscaCurveOrExponent,
        cscaSignatureAlgorithmBits: cscaSignatureAlgorithmBits,
        cscaSaltLength: cscaSaltLength,
        csca: csca,
        cscaParsed: cscaParsed,
        cscaBits: cscaSignatureAlgorithmBits,
    };
}
