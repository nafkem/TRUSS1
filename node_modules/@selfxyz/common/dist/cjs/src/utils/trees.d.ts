import { LeanIMT } from '@openpassport/zk-kit-lean-imt';
import { SMT } from '@openpassport/zk-kit-smt';
import { CertificateData } from './certificate_parsing/dataStructure.js';
import { DscCertificateMetaData } from './passports/passport_parsing/parseDscCertificateData.js';
/** get leaf for DSC and CSCA Trees */
export declare function getLeaf(parsed: CertificateData, type: 'dsc' | 'csca'): string;
export declare function getLeafDscTreeFromDscCertificateMetadata(dscParsed: CertificateData, dscMetaData: DscCertificateMetaData): string;
export declare function getLeafDscTreeFromParsedDsc(dscParsed: CertificateData): string;
export declare function getLeafDscTree(dsc_parsed: CertificateData, csca_parsed: CertificateData): string;
export declare function getLeafCscaTree(csca_parsed: CertificateData): string;
export declare function getDscTreeInclusionProof(leaf: string, serialized_dsc_tree: string): [string, number[], bigint[], number];
export declare function getCscaTreeInclusionProof(leaf: string, _serialized_csca_tree: any[][]): any[];
export declare function getCscaTreeRoot(serialized_csca_tree: any[][]): any;
export declare function formatRoot(root: string): string;
export declare function generateSMTProof(smt: SMT, leaf: bigint): {
    root: import("@openpassport/zk-kit-smt").Node;
    leaf_depth: number;
    closestleaf: any;
    siblings: import("@openpassport/zk-kit-smt").Siblings;
};
export declare function generateMerkleProof(imt: LeanIMT, _index: number, maxleaf_depth: number): {
    siblings: bigint[];
    path: number[];
    leaf_depth: number;
};
export declare function buildSMT(field: any[], treetype: string): [number, number, SMT];
export declare function getCountryLeaf(country_by: (bigint | number)[], country_to: (bigint | number)[], i?: number): bigint;
export declare function getPassportNumberAndNationalityLeaf(passport: (bigint | number)[], nationality: (bigint | number)[], i?: number): bigint;
export declare function getNameDobLeaf(nameMrz: (bigint | number)[], dobMrz: (bigint | number)[], i?: number): bigint;
export declare function getNameYobLeaf(nameMrz: (bigint | number)[], yobMrz: (bigint | number)[], i?: number): bigint;
export declare function getNameLeaf(nameMrz: (bigint | number)[], i?: number): bigint;
export declare function getDobLeaf(dobMrz: (bigint | number)[], i?: number): bigint;
