"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDscCertificateData = parseDscCertificateData;
const parseCertificateSimple_js_1 = require("../../certificate_parsing/parseCertificateSimple.js");
const csca_js_1 = require("../../csca.js");
const brutForceDscSignature_js_1 = require("./brutForceDscSignature.js");
const parsePassportData_js_1 = require("./parsePassportData.js");
function parseDscCertificateData(dscCert, skiPem = null) {
    let csca, cscaParsed, cscaHashAlgorithm, cscaSignatureAlgorithm, cscaCurveOrExponent, cscaSignatureAlgorithmBits, cscaSaltLength;
    let cscaFound = false;
    if (dscCert.authorityKeyIdentifier) {
        try {
            csca = (0, csca_js_1.getCSCAFromSKI)(dscCert.authorityKeyIdentifier, skiPem);
            if (csca) {
                cscaParsed = (0, parseCertificateSimple_js_1.parseCertificateSimple)(csca);
                const details = (0, brutForceDscSignature_js_1.brutforceSignatureAlgorithmDsc)(dscCert, cscaParsed);
                cscaFound = true;
                cscaHashAlgorithm = details.hashAlgorithm;
                cscaSignatureAlgorithm = details.signatureAlgorithm;
                cscaCurveOrExponent = (0, parsePassportData_js_1.getCurveOrExponent)(cscaParsed);
                cscaSignatureAlgorithmBits = parseInt(cscaParsed.publicKeyDetails.bits);
                cscaSaltLength = details.saltLength;
            }
        }
        catch (error) { }
    }
    else {
        console.log('js: dscCert.authorityKeyIdentifier not found');
    }
    return {
        cscaFound: cscaFound,
        cscaHashAlgorithm: cscaHashAlgorithm,
        cscaSignatureAlgorithm: cscaSignatureAlgorithm,
        cscaCurveOrExponent: cscaCurveOrExponent,
        cscaSignatureAlgorithmBits: cscaSignatureAlgorithmBits,
        cscaSaltLength: cscaSaltLength,
        csca: csca,
        cscaParsed: cscaParsed,
        cscaBits: cscaSignatureAlgorithmBits,
    };
}
